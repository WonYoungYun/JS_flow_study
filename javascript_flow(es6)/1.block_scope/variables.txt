let과 const
let은 재할당 가능
const는 한번할당하면 재할당 불가

Object.freeze와 deep copy
1. Object 자체를 얼린다.
2. Object 내부의 프로퍼티들을 순회하면서, 만약 참조형이라면 얼린다.(반복)

얕은복사 : 객체의 프로퍼티들을 복사(depth 1단계까지만)
깊은복사 : 객체의 프로퍼티들을 복사(모든 depth에 대해서)
    1) 프로퍼티들을 복사한다.
    2) 프로퍼티들 중에 참조형이 있다면, 1)반복(재귀)

얕은복사는 메모리값 만을 가져온다.
깊은복사를 해야만 immutable(변경불가)하다, 매번 새로운 객체 생성

for in문 안에서는 const를 사용가능 하지만 for문에서는 사용하지 못한다.

let과 const의 공통사항
    유효범위가 존재한다.(block scope)
    TDZ존재
    어지간하면 const 사용 -> 프론트엔드에서는 객체를 주로 다루기 때문, let은 값 자체의 변경이 필요한 예외적인 경우