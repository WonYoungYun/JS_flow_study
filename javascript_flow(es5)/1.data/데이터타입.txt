기본형과 참조형의 종류 및 차이점

Primitive Type : 값을 그대로 할당
    Number
    String
    Boolean
    null
    undefined

Reference Type : 값이 저장된 주소값을 할당(참조)
    Object
        Array
        Function
        RegExp

기본형데이터의 동작
    1.데이터가 담길 공간을 확보한다.
    2.공간의 주소를 가져온다.
    3.주소에 변수명 매칭

    var a; //데이터에 담길 공간을 확보하고 주소를 가져와 주소에 해당 변수명(a)와 매칭 -선언
    a = 10; //변수명에 매칭된 주소를 따라간 뒤 주소의 공간에 10을 쓴다. -할당
    a = 20; //메모리상에 a가 있는지를 확인한다.
            //없다면 선언과정을 거친다.
            //a에 대한 정보가 존재하기 때문에 a에 매칭된 주소값을 쫒아 해당 주소에 데이터를 덮어쓴다.

    var b = a; //데이터에 담길 공간을 확보하고 주소를 가져와 주소와 변수(b)를 매칭한다.
            //a의 주소값을 찾아 주소에 담긴 데이터를 가져온다
            //변수b의 주소를 따라가 주소의 공간에 a에서 가져온 데이터를 쓴다.

참조형 데이터의 동작
    1.데이터가 담길 공간을 확보한다.
    2.공간의 주소를 가져온다.
    3.주소에 변수명 매칭

    var obj = {
        a: 1,
        b: 'b'
    }; //데이터에 담길 공간을 확보하고, 주소를 가져와 주소에 해당 변수명(obj)와 매칭 -선언

    //변수명: obj
    //주소: @100
    //주소 @100은 객체를 담기위해 새로운 공간을 확보한다.
    //주소: @1000 에 아래의 데이터를 저장
    {
        a:@1011
        b:@1022
    }   //객체를 담기위해 공간을 새로 확보한다.
        //객체 내부의 데이터를 쓰기위해 새로운 공간을 각자 확보
    //그리고 @100에 객체데이터가 저장된 @1000과 연결해준다.

    참조형 데이터는 기본형 데이터의 집합

    var obj2 = obj; //새로운 공간을 확보하고 공간의 주소와 변수명을 매칭한다.
                    //obj변수가 가르키는 주소인 @100에서 객체의 데이터가 담긴 @1000을 가져와 obj2의 주소의 데이터에 쓴다.
                    //즉 같은 객체를 공유

    obj.a = 10;
    console.log(obj2.a); //10
    console.log(obj.a); //10  -> 같은 객체를 주소로 공유하기 때문에 obj2를 수정하면 obj의 데이터도 바뀌게 된다.


컴퓨터는 각 프로퍼티의 값을 왜 나누어 저장하는가?
    byte가 커질수록 한번에 표현가능한 숫자의 범위는 커지지만, 하나의 값을 표현하기위한 메모리 영역이 늘어나며,엄청난 숫자를 반복해서 써야하는 경우를 제외하면 매우 비효율적이다.
    따라서 효율성 및 전체 메모리 용량의 한계 등을 고려하여, 표현 가능한 값의 한계를 적정선으로 제한할 수 밖에 없는 것이다. 또한 여러개의 값을 메모리에 동시 저장할 수 있더라도 컴퓨터는 각각의 값을 구분하지 못한다.
    어떠한 경우든 컴퓨터는 지우고 수정하는 불필요한 작업을 거칠 수 밖에 없다.
    결국 처음부터 모든 값을 각각 따로따로 구분하여 주소값을 정해주고, 해당 변수나 프로퍼티에 값을 할당할 때에는 그 주소에 있는 메모리만 바꾸도록 하는 편이 컴퓨터에게는 안전하고 효율적일 것이다.
